@use './functions' as *;
@use './colors' as *;
@use './variables' as *;

@mixin horizontal-layout($gap: rem(64), $padding: $py $px, $min-width: max-content) {
    min-width: $min-width;
    // max-height: calc(100lvh - ($py * 2));
    height: 100%;
    min-height: fit-content;
    display: grid;
    grid-auto-flow: column;
    gap: $gap;
    padding: $padding;

    @media (max-width: 768px) {
        max-width: 100vw;
        min-width: initial;
        overflow-x: clip;

        display: flex;
        flex-direction: column;
        gap: rem(128);
    }
}
@mixin vertical-layout($max-width: rem(1920), $padding: 0 $px) {
    max-width: $max-width;
    margin: 0 auto;
    padding: $padding;
}
@mixin horizontal-max-height() {
    max-height: calc(100lvh - ($py * 2));
    @media (max-width: 768px) {
        max-height: 100%;
    }
}
@mixin block-title($max-width: 15ch, $font-size: lineScale-y(96, 40, 480, 1080)) {
    font-family: 'Fira-Extra', sans-serif;
    font-weight: $fw-bold;
    font-size: $font-size;
    line-height: 1;
    text-transform: uppercase;
    max-width: $max-width;
    @media (max-width: 768px) {
        font-size: lineScale(96, 40, 480, 1440);
    }
}
@mixin gradient-text-hover($main-color: $c-111111, $accent-color: $c-accent) {
    @supports (background-clip: text) {
        color: transparent;
        background-clip: text;
        background-image: linear-gradient(90deg, $accent-color 50%, $main-color 50%);
        background-size: 250% 200%;
        background-position: -80% -100%;
        transition: background-position $td $tf;
        @media (pointer: fine) {
            &:hover {
                background-position: -160% -200%;
            }
        }
    }
    @supports not (background-clip: text) {
        transition: color $td $tf;
        @media (pointer: fine) {
            &:hover {
                color: $c-accent;
            }
        }
    }
}
@mixin hover-underline($color: currentColor) {
    position: relative;
    width: fit-content;
    line-height: 150%;
    transition: all $td $tf;
    &::after {
        content: '';
        display: block;
        position: absolute;
        bottom: 0;
        left: 0;
        height: rem(2);
        width: 0;
        background-color: $color;
        transition: $td $tf;
    }
    @media (pointer: fine) {
        &:hover {
            color: $color;
            &::after {
                width: 100%;
            }
        }
    }
}
@mixin checkbox($size: rem(20), $accent-color: $c-accent, $contrast-color: $c-FFFFFF) {
    cursor: pointer;
    position: relative;
    width: $size;
    height: $size;
    aspect-ratio: 1/1;
    border: rem(1) solid $accent-color;
    > input[type='checkbox'] {
        cursor: pointer;
        position: absolute;
        z-index: 1;
        inset: 0;
        width: 100%;
        height: 100%;
        appearance: none;
        -moz-appearance: none;
        -webkit-appearance: none;
    }
    &::before,
    &::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        translate: -50% -50%;
        width: rem(14);
        height: rem(2);
        opacity: 0;
        transition: all calc($td / 2) $tf;
        pointer-events: none;
    }
    @media (pointer: fine) {
        &:hover {
            &::before,
            &::after {
                background-color: $accent-color;
                opacity: 1;
            }
            &::before {
                rotate: 90deg;
            }
        }
    }
    &:has(input:checked) {
        background-color: $accent-color;
        &::before,
        &::after {
            background-color: $contrast-color;
            opacity: 1;
        }
        &::before {
            left: 63%;
            width: rem(9);
            rotate: 135deg;
        }
        &::after {
            left: 30%;
            top: 60%;
            width: rem(8);
            rotate: -135deg;
        }
    }
}
@mixin button-secondary(
    $width: 100%,
    $color: $c-F3F2EE,
    $font-size: lineScale(32, 24, 480, 1440),
    $padding: rem(14) lineScale(64, 48, 480, 1440),
    $border-color: transparent,
    $background: $c-111111,
    $hover-background: $c-accent
) {
    cursor: pointer;
    box-sizing: border-box;
    position: relative;
    width: $width;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: rem(32);
    color: $color;
    text-transform: uppercase;
    font-size: $font-size;
    line-height: 1;
    font-weight: $fw-bold;
    padding: $padding;
    white-space: nowrap;
    border: rem(2) solid $border-color;
    border-radius: rem(32);
    transition: color $td $tf;
    &::before {
        content: '';
        position: absolute;
        z-index: 0;
        inset: 0;
        pointer-events: none;
        border-radius: inherit;
        background-image: linear-gradient(90deg, $hover-background 40%, $background 50%);
        background-size: 250% 200%;
        background-position: -80% -100%;
        transition: background-position $td $tf;
    }
    @media (pointer: fine) {
        &:hover {
            &::before {
                background-position: -165% -200%;
            }
            > span svg {
                animation: arrow-translate calc($td * 1.2) $tf;
            }
        }
    }
    &:active {
        opacity: 0.8;
    }
    > * {
        position: relative;
        z-index: 1;
    }
    > span:has(svg) {
        rotate: -45deg;
        overflow: hidden;
    }
    @keyframes arrow-translate {
        0% {
            translate: 0 0;
            opacity: 1;
        }
        45% {
            translate: 100% 0;
            opacity: 0;
        }
        55% {
            translate: -100% 0;
            opacity: 0;
        }
        100% {
            translate: 0 0;
            opacity: 1;
        }
    }
}
@mixin hide-scrollbar() {
    scrollbar-width: none;
    -ms-overflow-style: none;
    &::-webkit-scrollbar {
        display: none;
    }
}

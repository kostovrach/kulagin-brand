networks:
    prod:
        driver: bridge

services:
    nginx:
        image: nginx:stable-alpine
        ports:
            - '80:80'
        volumes:
            - './nginx.conf:/etc/nginx/nginx.conf:ro'
        depends_on:
            - frontend
        networks:
            - prod
        restart: unless-stopped

    mail-api:
        build:
            context: ./mail-api
            dockerfile: Dockerfile
        environment:
            - PORT=3001
            - MAIL_TO=${MAIL_TO}
            - MAIL_FROM=${MAIL_FROM}
            - SMTP_HOST=${SMTP_HOST}
            - SMTP_PORT=${SMTP_PORT}
        depends_on:
            - mailhog
        networks:
            - prod
        restart: unless-stopped

    mailhog:
        image: mailhog/mailhog
        ports:
            - '8025:8025'
            - '1025:1025'
        networks:
            - prod
        restart: unless-stopped

    postgres:
        image: postgres:15
        container_name: directus_postgres
        restart: unless-stopped
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - prod

    directus:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: directus_app
        restart: unless-stopped
        ports:
            - '8055:8055'
        environment:
            KEY: ${KEY}
            SECRET: ${SECRET}
            ADMIN_EMAIL: ${ADMIN_EMAIL}
            ADMIN_PASSWORD: ${ADMIN_PASSWORD}
            PUBLIC_URL: ${PUBLIC_URL}
            DB_CLIENT: postgres
            DB_HOST: postgres
            DB_PORT: 5432
            DB_DATABASE: ${POSTGRES_DB}
            DB_USER: ${POSTGRES_USER}
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            STORAGE_LOCATIONS: ${STORAGE_LOCATIONS}
            STORAGE_LOCAL_DRIVER: ${STORAGE_LOCAL_DRIVER}
            STORAGE_LOCAL_ROOT: ${STORAGE_LOCAL_ROOT}
            CORS_ENABLED: ${CORS_ENABLED}
            CORS_ORIGIN: ${CORS_ORIGIN}
        volumes:
            - ${PWD}/backend/uploads:/directus/uploads
            - ${PWD}/backend/extensions:/directus/extensions
            - ${PWD}/backend/backups:/directus/backups
        depends_on:
            - postgres
        networks:
            - prod
    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        networks:
            - prod
        restart: unless-stopped

volumes:
    postgres_data:
